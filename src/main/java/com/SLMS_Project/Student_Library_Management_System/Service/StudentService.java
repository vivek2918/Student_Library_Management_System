package com.SLMS_Project.Student_Library_Management_System.Service;

import com.SLMS_Project.Student_Library_Management_System.DTOs.StudentUpdateMobileRequestDto;
import com.SLMS_Project.Student_Library_Management_System.Enums.CardStatus;
import com.SLMS_Project.Student_Library_Management_System.Models.Book;
import com.SLMS_Project.Student_Library_Management_System.Models.Card;
import com.SLMS_Project.Student_Library_Management_System.Models.Student;
import com.SLMS_Project.Student_Library_Management_System.Repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;
    public String createStudent(Student student) {

        //Student from the postman is already the basic attributes set.
        //Card Should be autogenerated when createStudent function is called.
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED);//Card status is being set.
        card.setStudent(student);//foreign ket attributes is set.
        //Filling value of the unidirectional part.

        //Let's go to the student
        student.setCard(card);

        //If there was a unidirectional mapping : we had to save both of them
        //studentRepo.save () and cardRepo.save()
        //But we are super advance and are using bidirectional : Child will automatically be saved.
        // The major advantages of bidirectional mapping is CRUD operation only performs on the parent class or table
        // the child will be automatically performs by spring.

        studentRepository.save(student);
        //By cascading effect, child will automatically be saved (cardRepo will be saved)

        return "Student and card Created";
    }

    public String getStudentNameByEmail(String  email) {
        Student student=studentRepository.findByEmail(email);
        return student.getName();
    }

    public List<String> getStudentFromCountry(String country) {
        List<Student> students=studentRepository.findByCountry(country);
        List<String> list=new ArrayList<>();
        for(Student student : students){
            list.add(student.getName());
        }
        return list;
    }

    public String updateMobNo(StudentUpdateMobileRequestDto studentReq) {

        //CONVERT THE DTO TO ENTITY : saved letter

        //First we will try to fetch originalData
        Student originalStudent = studentRepository.findById(studentReq.getId()).get();

        //We will keep the other properties as it is : and only change the required parameters

        originalStudent.setMobNo(studentReq.getMobNo());

        //Always entity object is being saved.
        studentRepository.save(originalStudent);

        return "Student has been updated successfully";

    }

    public List<String> findBookIssuedToStudent(int id) {
        //fetch the database to get the student entity.
        Student student=studentRepository.findById(id).get();
        //get the card issued to the student.
        Card card=student.getCard();
        //from the card get the list of book issued to that card.
        List<Book>list=card.getBooksIssued();

        List<String>books=new ArrayList<>();

        for(Book book : list){
            String name=book.getName();
            books.add(name);
        }

       return books;
    }
}
